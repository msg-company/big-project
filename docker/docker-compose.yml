version: "3.9"

networks:
  proxy:
    name: proxy
    driver: bridge
  elk:
    name: elk
    driver: bridge
  kafka_network:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local
  kibana_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  vault_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  portainer_data:
    driver: local
  kafka_data:
    driver: local
  consul_data:
    driver: local

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-common: &common-settings
  restart: unless-stopped
  networks:
    - proxy
  logging: *default-logging
  deploy:
    resources:
      limits:
        cpus: "1"
        memory: ${MEMORY_LIMIT}
      reservations:
        cpus: "0.5"
        memory: ${MEMORY_RESERVATION}

x-service-healthcheck: &service-healthcheck
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

x-exporter-common: &exporter-common
  <<: *common-settings
  deploy:
    resources:
      limits:
        cpus: "0.5"
        memory: 128M
      reservations:
        cpus: "0.1"
        memory: 64M

x-db-healthcheck: &db-healthcheck
  healthcheck:
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 30s

services:
  setup:
    container_name: setup
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch_data:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - elk
    restart: unless-stopped

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - ${LOGSTASH_PORT}:5044
      - ${LOGSTASH_TCP_PORT}:50000/tcp
      - ${LOGSTASH_UDP_PORT}:50000/udp
      - ${LOGSTASH_API_PORT}:9600
      - 8099:8099
    environment:
      LS_JAVA_OPTS: -Xms${LOGSTASH_MEM_LIMIT_MIN} -Xmx${LOGSTASH_MEM_LIMIT}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_DOMAIN}`)"
      - "traefik.http.routers.kibana.entrypoints=web"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  postgres:
    container_name: postgres
    <<: [*common-settings, *service-healthcheck]
    image: postgres:${POSTGRES_VERSION}-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    env_file:
      - .env
    environment:
      - TZ=${TIMEZONE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
    ports:
      - "${POSTGRES_PORT}:5432"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: ${POSTGRES_MEM_LIMIT}
        reservations:
          cpus: "1"
          memory: ${POSTGRES_MEM_LIMIT_MIN}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    <<: *common-settings
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      - TZ=${TIMEZONE}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${PGADMIN_MEM_LIMIT}
        reservations:
          memory: ${PGADMIN_MEM_LIMIT_MIN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  redis:
    container_name: redis
    <<: *common-settings
    image: redis:${REDIS_VERSION}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - ${REDIS_PORT}:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-commander:
    container_name: redis-commander
    <<: *common-settings
    image: ghcr.io/joeferner/redis-commander:latest
    platform: linux/arm64
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - elk
      - proxy
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`${REDIS_DOMAIN}`)"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"
    restart: unless-stopped

  minio:
    container_name: minio
    <<: *common-settings
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://${MINIO_DOMAIN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_API_DOMAIN}`)"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

  grafana:
    container_name: grafana
    <<: *common-settings
    image: grafana/grafana:${GRAFANA_VERSION}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - TZ=${TIMEZONE}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT}
      - GF_SMTP_ENABLED=false
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEM_LIMIT}
        reservations:
          memory: ${GRAFANA_MEM_LIMIT_MIN}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  prometheus:
    container_name: prometheus
    <<: *common-settings
    image: prom/prometheus:${PROMETHEUS_VERSION}
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEM_LIMIT}
        reservations:
          memory: ${PROMETHEUS_MEM_LIMIT_MIN}
    healthcheck:
      test:
        ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN}`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  jaeger:
    container_name: jaeger
    <<: *common-settings
    image: jaegertracing/all-in-one:${JAEGER_VERSION}
    ports:
      - "${JAEGER_PORT}:16686"
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "14250:14250"
    deploy:
      resources:
        limits:
          memory: ${JAEGER_MEM_LIMIT}
        reservations:
          memory: ${JAEGER_MEM_LIMIT_MIN}
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`${JAEGER_DOMAIN}`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  kafka:
    container_name: broker
    image: apache/kafka:latest
    ports:
      - "9092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker:19092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:19092,EXTERNAL://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  kafka-ui:
    container_name: kafka-ui
    <<: *common-settings
    image: provectuslabs/kafka-ui:latest
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:19092
      - KAFKA_CLUSTERS_0_METRICS_PORT=19092
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
      - kafka
    networks:
      - proxy
      - kafka_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka-ui.rule=Host(`${KAFKA_UI_DOMAIN}`)"
      - "traefik.http.services.kafka-ui.loadbalancer.server.port=8080"

  consul:
    container_name: consul
    <<: *common-settings
    image: hashicorp/consul:${CONSUL_VERSION}
    volumes:
      - consul_data:/consul/data
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.consul.rule=Host(`${CONSUL_DOMAIN}`)"
      - "traefik.http.routers.consul.service=consul"
      - "traefik.http.services.consul.loadbalancer.server.port=${CONSUL_HTTP_PORT}"
    ports:
      - "${CONSUL_HTTP_PORT}:${CONSUL_HTTP_PORT}"
      - "${CONSUL_DNS_PORT}:${CONSUL_DNS_PORT}/udp"
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  traefik:
    container_name: traefik
    image: traefik:latest
    ports:
      - 80:80
    networks:
      - proxy
      - elk
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --api.dashboard=true
      - --log.level=INFO
      - --providers.docker.network=proxy
      - --providers.docker.exposedByDefault=false
      - --entrypoints.web.address=:80

    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.entrypoints=web

  node-exporter:
    container_name: node-exporter
    <<: *exporter-common
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"

  redis-exporter:
    container_name: redis-exporter
    <<: *exporter-common
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://${REDIS_PASSWORD}@redis:${REDIS_PORT}
    ports:
      - "9121:9121"
    depends_on:
      - redis

  postgres-exporter:
    container_name: postgres-exporter
    <<: *exporter-common
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres

  sonarqube:
    container_name: sonarqube
    <<: *common-settings
    image: sonarqube:${SONARQUBE_VERSION}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "${SONARQUBE_PORT}:9000"
    environment:
      - TZ=${TIMEZONE}
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_USERNAME=${POSTGRES_USER}
      - SONAR_JDBC_PASSWORD=${POSTGRES_PASSWORD}
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube_db
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: ${SONARQUBE_MEM_LIMIT}
        reservations:
          memory: ${SONARQUBE_MEM_LIMIT_MIN}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status"]
      interval: 20s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_DOMAIN}`)"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"

  portainer:
    container_name: portainer
    <<: *common-settings
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    command: --http-enabled
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT}:9000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
